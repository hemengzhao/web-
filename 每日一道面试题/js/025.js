/**
 * JavaScript 中事件模型
 * */

// JavaScript 中的事件模型用于处理用户与网页交互时产生的事件。
// 通过事件模型，开发人员可以编写代码来捕获处理各种用户触发的事件，如点击、输入、鼠标移动等

/**
 * javascript中的三种事件模型
 * */
// 1. 原始事件模型（DOM0级事件模型）
// 2. 标准事件模型（DOM2级事件模型）
// 3. IE事件模型（现在基本不使用）

/**
 * 原始事件模型
 * */
// 事件绑定监听函数比较简单，有两种方式
// 通过html代码绑定
// <input type="button" onclick="fun()">
// 通过js绑定
// var btn = document.getElementById('.btn');
// btn.onclick = fun;

// 只支持冒泡事件，不支持捕获
// 一个类型事件只能绑定一次

/**
 * 标准事件模型
 * */
// 在该事件模型中，一次事件公有三个过程
// 事件捕获阶段： 事件从document一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行
// 事件处理阶段：事件到达目标元素, 触发目标元素的监听函数
// 事件冒泡阶段：事件从目标元素冒泡到document, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行

// 通过 addEventListener 方法注册事件处理程序。
// 通过 removeEventListener 方法移除监听函数事件。
// 允许为同一事件添加多个处理程序。

/**
 * IE事件模型
 * */
// IE事件模型共有两个过程:
// 事件处理阶段：事件到达目标元素, 触发目标元素的监听函数。
// 事件冒泡阶段：事件从目标元素冒泡到document, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行

// 事件绑定监听函数的方式如下: attachEvent(eventType, handler)
// 事件移除监听函数的方式如下: detachEvent(eventType, handler)
