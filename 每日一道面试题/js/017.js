/**
 * MDN 上面解释
 * 闭包是一个函数以及其捆绑的周边环境状态（lexical environment，词法环境）的引用的组合。
 * 换而言之，闭包让开发者可以从内部函数访问外部函数的作用域。
 * 在 JavaScript 中，闭包会随着函数的创建而被同时创建。
 *
 * 特点
 * 1、函数嵌套函数
 * 2、内部函数 使用了外部函数变量/形参
 * 3、闭包可以扩大局部变量的使用范围
 * 4、以后开发过程中不可以随意使用闭包，闭包会出现变量的内存地址不能被回收的问题
 *
 *
 * 优点
 * 1. 保护变量，避免变量全局污染
 * 2. 在内存中，保护了一块内存地址不被销毁，可以作为缓存使用。
 * 3、闭包有自己的作用域，可以利用这个作用域，操作内部数据

 *
 * 缺点：
 * 1. 容易造成内存泄露
 * 2. 性能问题 闭包会增加内存和运行时上下文的消耗，可能影响代码的性能，特别是在循环中创建闭包时要格外注意
 * 3. 滥用闭包可能导致代码难以维护，理解和调试
 * 
 * 
 * 应用场景
 * 1. 实现私有变量和方法
 * 2. 创建函数工厂
 * 3. 实现回调和定时器
 */

function makeFunc() {
  var name = "Mozilla";
  function displayName() {
    alert(name);
  }
  return displayName;
}
